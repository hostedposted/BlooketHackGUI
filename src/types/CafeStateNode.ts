export interface CafeStateNode {
    canGoNext: boolean;
    gameOver: boolean;
    gettingQuestion: boolean;
    here: boolean;
    isReading: boolean;
    redirect: boolean;
    waiting: boolean;
    doneTimeout: number;
    foodServed: number;
    happyCustomers: number;
    addCustomer(arg0: any): void;
    answerNext(): void;
    answerTour(arg0: any): void;
    canUpgrade(): void;
    componentDidMount(): any;
    componentWillUnmount(): void;
    forceUpdate(t?: any): void;
    getQuestion(): void;
    goToShop(): void;
    newDay(): void;
    newLiveCustomer(): void;
    onAnswer(arg0: any): void;
    onSpacePress(arg0: any): void;
    readQuestion(): void;
    removeCustomer(arg0: any): void;
    render(): any;
    selectCustomer(arg0: any): void;
    selectFood(arg0: any): void;
    setState(t: any, e: any): void;
    _reactInternalFiber: {
        childExpirationTime: number;
        effectTag: number;
        expirationTime: number;
        index: number;
        mode: number;
        tag: number;
        dependencies: null;
        key: null;
        nextEffect: null;
        ref: null;
        sibling: null;
        elementType(e: any): any;
        type(e: any): any;
        alternate: {
            childExpirationTime: number;
            effectTag: number;
            expirationTime: number;
            index: number;
            mode: number;
            tag: number;
            dependencies: null;
            key: null;
            nextEffect: null;
            ref: null;
            sibling: null;
            elementType(e: any): any;
            type(e: any): any;
            alternate: CafeStateNode["_reactInternalFiber"];
            child: {
                childExpirationTime: number;
                effectTag: number;
                expirationTime: number;
                index: number;
                mode: number;
                tag: number;
                elementType: string;
                type: string;
                dependencies: null;
                key: null;
                memoizedState: null;
                nextEffect: null;
                ref: null;
                sibling: null;
                updateQueue: null;
                stateNode: HTMLDivElement;
                alternate: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    dependencies: null;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: CafeStateNode["_reactInternalFiber"]["alternate"]["child"];
                    child: any /* too deep */;
                    firstEffect: any /* too deep */;
                    lastEffect: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"];
                };
                child: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    stateNode: null;
                    updateQueue: null;
                    elementType(e: any): any;
                    type(e: any): any;
                    alternate: any /* too deep */;
                    child: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["alternate"]["child"];
                    sibling: any /* too deep */;
                };
                firstEffect: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    child: null;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    updateQueue: null;
                    stateNode: HTMLElement;
                    alternate: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                    sibling: any /* too deep */;
                };
                lastEffect: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    key: string;
                    dependencies: null;
                    firstEffect: null;
                    lastEffect: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    elementType(e: any): any;
                    type(e: any): any;
                    alternate: any /* too deep */;
                    child: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    memoizedState: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                    stateNode: any /* too deep */;
                    updateQueue: any /* too deep */;
                };
                memoizedProps: {
                    className: string;
                    id: string;
                    children: any /* too deep */;
                };
                pendingProps: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["memoizedProps"];
                return: CafeStateNode["_reactInternalFiber"]["alternate"];
            };
            firstEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
            lastEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
            memoizedProps: {
                id: undefined;
                staticContext: undefined;
                deleteClient(): any;
                endCafeDay(): any;
                endCafeLive(): any;
                setStanding(): any;
                cafe: {
                    isHappy: boolean;
                    cafeCash: number;
                    day: number;
                    foodServed: number;
                    goal: number;
                    mode: string;
                    stage: string;
                    abilities: any /* too deep */;
                    corrects: any /* too deep */;
                    customers: any /* too deep */;
                    foods: any /* too deep */;
                    foodStocks: any /* too deep */;
                    freeQuestions: any /* too deep */;
                    incorrects: any /* too deep */;
                    items: any /* too deep */;
                    questions: any /* too deep */;
                };
                client: {
                    allowAccounts: boolean;
                    plus: boolean;
                    randomNames: boolean;
                    blook: string;
                    hostId: string;
                    name: string;
                    textColor: string;
                    username: string;
                };
                firebase: {
                    liveAppNum: number;
                    checkConnection(e: any): any;
                    connectToDb(e: any): void;
                    disconnectFromDb(): any;
                    getDatabaseRef(e: any, t: any): any;
                    getDatabaseVal(e: any, t: any, a: any): any;
                    removeHost(e: any): any;
                    removeVal(e: any, t: any, a: any): any;
                    setAuth(e: any, t: any, a: any): any;
                    setClient(e: any, t: any, a: any): any;
                    setHost(e: any, t: any, a: any, n: any, o: any): any;
                    setStage(e: any, t: any): any;
                    setVal(e: any, t: any): any;
                    testFirewall(e: any): any;
                    liveApp: any /* too deep */;
                };
                history: {
                    length: number;
                    action: string;
                    block(t: any): any;
                    createHref(t: any): any;
                    go(t: any): void;
                    goBack(): void;
                    goForward(): void;
                    listen(t: any): any;
                    push(t: any, e: any): void;
                    replace(t: any, e: any): void;
                    location: any /* too deep */;
                };
                location: {
                    hash: string;
                    key: string;
                    pathname: string;
                    search: string;
                    state: undefined;
                };
                match: {
                    isExact: boolean;
                    path: string;
                    url: string;
                    params: any /* too deep */;
                };
                user: {
                    loading: boolean;
                    getData(): any;
                    getLoggedIn(): any;
                    data: any /* too deep */;
                };
            };
            memoizedState: {
                items: any;
                askTour: boolean;
                canUpgrade: boolean;
                correct: boolean;
                gameOver: boolean;
                redirect: boolean;
                showTour: boolean;
                cafeCash: number;
                cashChange: number;
                customersMissed: number;
                day: number;
                foodSelected: number;
                goal: number;
                totalProfit: number;
                ability: string;
                attackerBlook: string;
                attackerName: string;
                mode: string;
                name: string;
                phase: string;
                readId: string;
                customers: any /* too deep */[];
                foods: any /* too deep */[];
                futureCustomers: never[];
                question: {};
                reportArray: never[];
            };
            pendingProps: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedProps"];
            return: {
                childExpirationTime: number;
                effectTag: number;
                expirationTime: number;
                index: number;
                mode: number;
                tag: number;
                key: null;
                memoizedState: null;
                nextEffect: null;
                ref: null;
                sibling: null;
                stateNode: null;
                updateQueue: null;
                alternate: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    stateNode: null;
                    updateQueue: null;
                    alternate: CafeStateNode["_reactInternalFiber"]["alternate"]["return"];
                    child: CafeStateNode["_reactInternalFiber"];
                    dependencies: any /* too deep */;
                    elementType: any /* too deep */;
                    firstEffect: any /* too deep */;
                    lastEffect: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                    type: any /* too deep */;
                };
                child: CafeStateNode["_reactInternalFiber"]["alternate"];
                dependencies: {
                    expirationTime: number;
                    responders: null;
                    firstContext: any /* too deep */;
                };
                elementType: {
                    _threadCount: number;
                    $$typeof: symbol;
                    _calculateChangedBits: null;
                    _currentValue: null;
                    _currentValue2: null;
                    Consumer: CafeStateNode["_reactInternalFiber"]["alternate"]["return"]["elementType"];
                    Provider: any /* too deep */;
                };
                firstEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
                lastEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
                memoizedProps: {
                    children(a: any): any;
                };
                pendingProps: CafeStateNode["_reactInternalFiber"]["alternate"]["return"]["memoizedProps"];
                return: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    dependencies: null;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    stateNode: null;
                    updateQueue: null;
                    elementType(t: any): any;
                    type(t: any): any;
                    alternate: any /* too deep */;
                    child: CafeStateNode["_reactInternalFiber"]["alternate"]["return"];
                    firstEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
                    lastEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                };
                type: CafeStateNode["_reactInternalFiber"]["alternate"]["return"]["elementType"];
            };
            stateNode: {
                canGoNext: boolean;
                gameOver: boolean;
                gettingQuestion: boolean;
                here: boolean;
                isReading: boolean;
                redirect: boolean;
                waiting: boolean;
                doneTimeout: number;
                foodServed: number;
                happyCustomers: number;
                addCustomer(arg0: any): void;
                answerNext(): void;
                answerTour(arg0: any): void;
                canUpgrade(): void;
                componentDidMount(): any;
                componentWillUnmount(): void;
                forceUpdate(t: any): void;
                getQuestion(): void;
                goToShop(): void;
                newDay(): void;
                newLiveCustomer(): void;
                onAnswer(arg0: any): void;
                onSpacePress(arg0: any): void;
                readQuestion(): void;
                removeCustomer(arg0: any): void;
                render(): any;
                selectCustomer(arg0: any): void;
                selectFood(arg0: any): void;
                setState(t: any, e: any): void;
                _reactInternalFiber: CafeStateNode["_reactInternalFiber"];
                context: {};
                corrects: {
                    "2": number;
                };
                dbRefMe: {
                    key: string;
                    child(e: any): any;
                    endAt(): any;
                    endBefore(): any;
                    equalTo(t: any, n: any): any;
                    get(): any;
                    getKey(): any;
                    getParent(): any;
                    getRoot(): any;
                    isEqual(t: any): any;
                    limitToFirst(t: any): any;
                    limitToLast(t: any): any;
                    off(e: any, t: any, n: any): void;
                    on(t: any, n: any, r: any, o: any): any;
                    once(t: any, n: any, r: any, o: any): any;
                    onDisconnect(): any;
                    orderByChild(t: any): any;
                    orderByKey(): any;
                    orderByPriority(): any;
                    orderByValue(): any;
                    push(e: any, t: any): any;
                    remove(e: any): any;
                    set(e: any, t: any): any;
                    setPriority(e: any, t: any): any;
                    setWithPriority(e: any, t: any, n: any): any;
                    startAfter(): any;
                    startAt(): any;
                    toJSON(): any;
                    toString(): any;
                    transaction(e: any, t: any, n: any): any;
                    update(e: any, t: any): any;
                    _delegate: any /* too deep */;
                    database: any /* too deep */;
                    parent: any /* too deep */;
                    ref: any /* too deep */;
                    root: any /* too deep */;
                };
                dbRefStage: {
                    key: string;
                    child(e: any): any;
                    endAt(): any;
                    endBefore(): any;
                    equalTo(t: any, n: any): any;
                    get(): any;
                    getKey(): any;
                    getParent(): any;
                    getRoot(): any;
                    isEqual(t: any): any;
                    limitToFirst(t: any): any;
                    limitToLast(t: any): any;
                    off(e: any, t: any, n: any): void;
                    on(t: any, n: any, r: any, o: any): any;
                    once(t: any, n: any, r: any, o: any): any;
                    onDisconnect(): any;
                    orderByChild(t: any): any;
                    orderByKey(): any;
                    orderByPriority(): any;
                    orderByValue(): any;
                    push(e: any, t: any): any;
                    remove(e: any): any;
                    set(e: any, t: any): any;
                    setPriority(e: any, t: any): any;
                    setWithPriority(e: any, t: any, n: any): any;
                    startAfter(): any;
                    startAt(): any;
                    toJSON(): any;
                    toString(): any;
                    transaction(e: any, t: any, n: any): any;
                    update(e: any, t: any): any;
                    _delegate: any /* too deep */;
                    database: any /* too deep */;
                    parent: any /* too deep */;
                    ref: any /* too deep */;
                    root: any /* too deep */;
                };
                foodSales: {
                    "Breakfast Combo": number;
                    Cereal: number;
                    "French Toast": number;
                    Milk: number;
                    "Orange Juice": number;
                    Pancakes: number;
                    Toast: number;
                    Waffle: number;
                    Yogurt: number;
                };
                freeQuestions: any /* too deep */[];
                incorrects: {};
                isReactComponent: {};
                msg: {};
                props: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedProps"];
                questions: any /* too deep */[];
                refs: {};
                state: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedState"];
                timeouts: number[];
                updater: {
                    enqueueForceUpdate(e: any, t: any): void;
                    enqueueReplaceState(e: any, t: any, n: any): void;
                    enqueueSetState(e: any, t: any, n: any): void;
                    isMounted(e: any): any;
                };
            };
            updateQueue: {
                effects: null;
                baseQueue: {
                    expirationTime: number;
                    tag: number;
                    callback: null;
                    payload: null;
                    suspenseConfig: null;
                    next: CafeStateNode["_reactInternalFiber"]["alternate"]["updateQueue"]["baseQueue"];
                };
                baseState: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedState"];
                shared: {
                    pending: null;
                };
            };
        };
        child: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["alternate"];
        firstEffect: {
            childExpirationTime: number;
            effectTag: number;
            expirationTime: number;
            index: number;
            mode: number;
            tag: number;
            elementType: string;
            type: string;
            child: null;
            dependencies: null;
            firstEffect: null;
            key: null;
            lastEffect: null;
            memoizedState: null;
            nextEffect: null;
            ref: null;
            updateQueue: null;
            stateNode: HTMLElement;
            alternate: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
            memoizedProps: {
                tabIndex: number;
                className: string;
                role: string;
                onClick(): any;
            };
            pendingProps: CafeStateNode["_reactInternalFiber"]["firstEffect"]["memoizedProps"];
            return: {
                childExpirationTime: number;
                effectTag: number;
                expirationTime: number;
                index: number;
                mode: number;
                tag: number;
                elementType: string;
                type: string;
                dependencies: null;
                key: null;
                memoizedState: null;
                nextEffect: null;
                ref: null;
                updateQueue: null;
                stateNode: HTMLDivElement;
                alternate: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    dependencies: null;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"];
                    child: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
                    firstEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
                    lastEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["firstEffect"];
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                    sibling: any /* too deep */;
                };
                child: CafeStateNode["_reactInternalFiber"]["firstEffect"];
                firstEffect: CafeStateNode["_reactInternalFiber"]["firstEffect"];
                lastEffect: CafeStateNode["_reactInternalFiber"]["firstEffect"];
                memoizedProps: {
                    className: string;
                    children: any /* too deep */;
                };
                pendingProps: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"]["memoizedProps"];
                return: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    dependencies: null;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: any /* too deep */;
                    child: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"];
                    firstEffect: CafeStateNode["_reactInternalFiber"]["firstEffect"];
                    lastEffect: CafeStateNode["_reactInternalFiber"]["firstEffect"];
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                };
                sibling: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    child: null;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"]["return"];
                    sibling: any /* too deep */;
                };
            };
            sibling: {
                childExpirationTime: number;
                effectTag: number;
                expirationTime: number;
                index: number;
                mode: number;
                tag: number;
                elementType: string;
                type: string;
                child: null;
                dependencies: null;
                firstEffect: null;
                key: null;
                lastEffect: null;
                memoizedState: null;
                nextEffect: null;
                ref: null;
                updateQueue: null;
                stateNode: HTMLElement;
                alternate: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    child: null;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    updateQueue: null;
                    stateNode: HTMLElement;
                    alternate: CafeStateNode["_reactInternalFiber"]["firstEffect"]["sibling"];
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"]["alternate"];
                    sibling: any /* too deep */;
                };
                memoizedProps: {
                    tabIndex: number;
                    className: string;
                    role: string;
                    onClick(): void;
                };
                pendingProps: CafeStateNode["_reactInternalFiber"]["firstEffect"]["sibling"]["memoizedProps"];
                return: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"];
                sibling: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    memoizedProps: string;
                    pendingProps: string;
                    child: null;
                    dependencies: null;
                    elementType: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    type: null;
                    updateQueue: null;
                    stateNode: Text;
                    alternate: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["firstEffect"]["return"];
                };
            };
        };
        lastEffect: {
            childExpirationTime: number;
            effectTag: number;
            expirationTime: number;
            index: number;
            mode: number;
            tag: number;
            key: string;
            dependencies: null;
            firstEffect: null;
            lastEffect: null;
            nextEffect: null;
            ref: null;
            sibling: null;
            elementType(e: any): any;
            type(e: any): any;
            alternate: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
            child: {
                childExpirationTime: number;
                effectTag: number;
                expirationTime: number;
                index: number;
                mode: number;
                tag: number;
                elementType: string;
                type: string;
                dependencies: null;
                firstEffect: null;
                key: null;
                lastEffect: null;
                memoizedState: null;
                nextEffect: null;
                ref: null;
                sibling: null;
                updateQueue: null;
                stateNode: HTMLDivElement;
                alternate: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: CafeStateNode["_reactInternalFiber"]["lastEffect"]["child"];
                    child: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
                };
                child: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    stateNode: null;
                    updateQueue: null;
                    elementType(e: any): any;
                    type(e: any): any;
                    alternate: any /* too deep */;
                    child: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["lastEffect"]["child"];
                    sibling: any /* too deep */;
                };
                memoizedProps: {
                    tabIndex: number;
                    className: string;
                    id: string;
                    role: string;
                    onClick(): void;
                    children: any /* too deep */;
                    style: any /* too deep */;
                };
                pendingProps: CafeStateNode["_reactInternalFiber"]["lastEffect"]["child"]["memoizedProps"];
                return: CafeStateNode["_reactInternalFiber"]["lastEffect"];
            };
            memoizedProps: {
                canClick: boolean;
                place: number;
                profit: number;
                time: number;
                blook: string;
                onClick(): any;
                onDone(t: any): any;
                order: {
                    "French Toast": number;
                    Waffle: number;
                    Yogurt: number;
                };
            };
            memoizedState: {
                done: boolean;
                success: boolean;
                order: CafeStateNode["_reactInternalFiber"]["lastEffect"]["memoizedProps"]["order"];
            };
            pendingProps: CafeStateNode["_reactInternalFiber"]["lastEffect"]["memoizedProps"];
            return: {
                childExpirationTime: number;
                effectTag: number;
                expirationTime: number;
                index: number;
                mode: number;
                tag: number;
                dependencies: null;
                elementType: null;
                key: null;
                memoizedState: null;
                nextEffect: null;
                ref: null;
                stateNode: null;
                type: null;
                updateQueue: null;
                alternate: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    dependencies: null;
                    elementType: null;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    stateNode: null;
                    type: null;
                    updateQueue: null;
                    alternate: CafeStateNode["_reactInternalFiber"]["lastEffect"]["return"];
                    child: any /* too deep */;
                    firstEffect: any /* too deep */;
                    lastEffect: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: any /* too deep */;
                    sibling: any /* too deep */;
                };
                child: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    key: string;
                    dependencies: null;
                    firstEffect: null;
                    lastEffect: null;
                    nextEffect: null;
                    ref: null;
                    elementType(e: any): any;
                    type(e: any): any;
                    alternate: any /* too deep */;
                    child: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    memoizedState: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["lastEffect"]["return"];
                    sibling: any /* too deep */;
                    stateNode: any /* too deep */;
                    updateQueue: any /* too deep */;
                };
                firstEffect: CafeStateNode["_reactInternalFiber"]["lastEffect"]["return"]["child"];
                lastEffect: CafeStateNode["_reactInternalFiber"]["lastEffect"];
                memoizedProps: any /* too deep */[];
                pendingProps: CafeStateNode["_reactInternalFiber"]["lastEffect"]["return"]["memoizedProps"];
                return: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    dependencies: null;
                    key: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    sibling: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: any /* too deep */;
                    child: any /* too deep */;
                    firstEffect: any /* too deep */;
                    lastEffect: CafeStateNode["_reactInternalFiber"]["lastEffect"];
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["alternate"];
                };
                sibling: {
                    childExpirationTime: number;
                    effectTag: number;
                    expirationTime: number;
                    index: number;
                    mode: number;
                    tag: number;
                    elementType: string;
                    type: string;
                    dependencies: null;
                    firstEffect: null;
                    key: null;
                    lastEffect: null;
                    memoizedState: null;
                    nextEffect: null;
                    ref: null;
                    updateQueue: null;
                    stateNode: HTMLDivElement;
                    alternate: any /* too deep */;
                    child: any /* too deep */;
                    memoizedProps: any /* too deep */;
                    pendingProps: any /* too deep */;
                    return: CafeStateNode["_reactInternalFiber"]["lastEffect"]["return"]["return"];
                    sibling: any /* too deep */;
                };
            };
            stateNode: {
                componentDidMount(): void;
                componentDidUpdate(): any;
                componentWillUnmount(): void;
                customerClicked(): void;
                forceUpdate(t: any): void;
                render(): any;
                setState(t: any, e: any): void;
                _reactInternalFiber: CafeStateNode["_reactInternalFiber"]["alternate"]["child"]["lastEffect"];
                context: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["context"];
                isReactComponent: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["isReactComponent"];
                props: CafeStateNode["_reactInternalFiber"]["lastEffect"]["memoizedProps"];
                refs: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["refs"];
                state: CafeStateNode["_reactInternalFiber"]["lastEffect"]["memoizedState"];
                updater: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["updater"];
            };
            updateQueue: {
                baseQueue: null;
                effects: null;
                baseState: CafeStateNode["_reactInternalFiber"]["lastEffect"]["memoizedState"];
                shared: {
                    pending: null;
                };
            };
        };
        memoizedProps: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedProps"];
        memoizedState: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedState"];
        pendingProps: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedProps"];
        return: CafeStateNode["_reactInternalFiber"]["alternate"]["return"]["alternate"];
        stateNode: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"];
        updateQueue: {
            baseQueue: null;
            effects: null;
            baseState: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedState"];
            shared: CafeStateNode["_reactInternalFiber"]["alternate"]["updateQueue"]["shared"];
        };
    };
    context: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["context"];
    corrects: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["corrects"];
    dbRefMe: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["dbRefMe"];
    dbRefStage: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["dbRefStage"];
    foodSales: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["foodSales"];
    freeQuestions: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["freeQuestions"];
    incorrects: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["incorrects"];
    isReactComponent: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["isReactComponent"];
    msg: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["msg"];
    props: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedProps"];
    questions: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["questions"];
    refs: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["refs"];
    state: CafeStateNode["_reactInternalFiber"]["alternate"]["memoizedState"];
    timeouts: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["timeouts"];
    updater: CafeStateNode["_reactInternalFiber"]["alternate"]["stateNode"]["updater"];
}
